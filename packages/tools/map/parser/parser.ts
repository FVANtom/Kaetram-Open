import _ from 'lodash-es';
import zlib from 'zlib';

import log from '@kaetram/common/util/log';

import { Modules } from '@kaetram/common/network';
import type { Layer, LayerObject, MapData, Property, Tile, Tileset, Animation } from './mapdata';
import type {
    ProcessedAnimation,
    ProcessedMap,
    ProcessedResource
} from '@kaetram/common/types/map';
import { getMapDivisionSize } from '@kaetram/common/extensions/sot/network/modules';

export default class ProcessMap {
    private map: ProcessedMap;
    private tilesetEntities: { [tileId: number]: string } = {};

    #collisionTiles: { [tileId: number]: boolean } = {};
    #trees: { [key: string]: ProcessedResource } = {};

    private twoTilesArray = [
        '_01',
        '-A',
        '-B',
        '-C',
        '-D',
        '-E',
        '-F',
        '-G',
        '-H',
        '-I',
        '-J',
        '-K',
        '-L',
        '-M',
        '-N',
        '-O',
        '-P',
        '-Q',
        '-R',
        '-S',
        '-T',
        '-U',
        '-V',
        '-W',
        '-X',
        '-Y',
        '(A',
        '(B',
        '(C',
        '(D',
        '(E',
        '(F',
        '(G',
        '(H',
        '(I',
        '(J',
        ')A',
        ')B',
        ')C',
        ')D',
        ')E',
        ')F',
        ')G',
        ')H',
        ')I',
        ')J',
        ')K',
        ')L',
        ')M',
        ')N',
        ')O',
        ')P',
        ')Q',
        ')R',
        ')S',
        ')T',
        ')U',
        ')V',
        ')W',
        ')X',
        ')Y',
        ')Z',
        '0A',
        '0B',
        '0C',
        '0D',
        '0E',
        '0F',
        '0G',
        '0H',
        '0I',
        '0J',
        '0K',
        '0L',
        '0M',
        '0N',
        '0P',
        '0Q',
        '0R',
        '0S',
        '0T',
        '0U',
        '0V',
        '0X',
        '0Z',
        '001',
        '1A',
        '1B',
        '1C',
        '1D',
        '1E',
        '1F',
        '1G',
        '1H',
        '1I',
        '1J',
        '1K',
        '1L',
        '1M',
        '1N',
        '1O',
        '1P',
        '1Q',
        '1R',
        '1S',
        '1T',
        '1U',
        '1V',
        '1W',
        '1X',
        '002',
        '2A',
        '2B',
        '2C',
        '2D',
        '2E',
        '2F',
        '2G',
        '2H',
        '2I',
        '2J',
        '2K',
        '2L',
        '2M',
        '2N',
        '2O',
        '2P',
        '2Q',
        '2R',
        '2S',
        '2T',
        '2U',
        '2V',
        '2W',
        '2X',
        '003',
        '004',
        '005',
        '5A',
        '5B',
        '5C',
        '5D',
        '5E',
        '5F',
        '5G',
        '5H',
        '5I',
        '5J',
        '5K',
        '5L',
        '5M',
        '5N',
        '5O',
        '5P',
        '5Q',
        '5R',
        '5S',
        '5T',
        '5U',
        '5V',
        '5W',
        '5X',
        '5Y',
        '006',
        '6A',
        '6B',
        '6C',
        '6D',
        '6E',
        '6F',
        '6G',
        '6H',
        '6I',
        '6J',
        '6K',
        '6L',
        '6M',
        '6N',
        '6O',
        '6P',
        '6Q',
        '6R',
        '6S',
        '6T',
        '6U',
        '6V',
        '6W',
        '007',
        '7A',
        '7B',
        '7C',
        '7D',
        '7E',
        '7F',
        '7G',
        '7H',
        '7I',
        '7J',
        '7K',
        '7L',
        '7M',
        '7N',
        '7O',
        '7P',
        '7Q',
        '7R',
        '7S',
        '7T',
        '7U',
        '7V',
        '7W',
        '7X',
        '7Y',
        '7Z',
        '008',
        '8A',
        '8B',
        '8C',
        '8D',
        '8E',
        '8F',
        '8G',
        '8H',
        '8I',
        '8J',
        '8K',
        '8L',
        '8M',
        '8N',
        '8O',
        '8P',
        '8Q',
        '8R',
        '8S',
        '8T',
        '8U',
        '8V',
        '009',
        '9A',
        '9B',
        '9C',
        '9D',
        '9E',
        '9F',
        '9G',
        '9H',
        '9I',
        '9J',
        '9K',
        '9L',
        '9M',
        '9N',
        '9O',
        '9P',
        '9Q',
        '9R',
        '9S',
        '9T',
        '9U',
        '9V',
        '010',
        '011',
        '012',
        '013',
        '014',
        '015',
        '016',
        '017',
        '018',
        '019',
        '020',
        '021',
        '022',
        '023',
        '024',
        '025',
        '026',
        '027',
        '028',
        '029',
        '030',
        '031',
        '032',
        '033',
        '034',
        '035',
        '036',
        '037',
        '038',
        '039',
        '040',
        '041',
        '042',
        '043',
        '044',
        '045',
        '046',
        '047',
        '048',
        '049',
        '050',
        '051',
        '052',
        '053',
        '054',
        '055',
        '056',
        '057',
        '058',
        '059',
        '060',
        '061',
        '062',
        '063',
        '064',
        '065',
        '066',
        '067',
        '068',
        '069',
        '070',
        '071',
        '072',
        '073',
        '074',
        '075',
        '076',
        '077',
        '078',
        '079',
        '080',
        '081',
        '082',
        '083',
        '084',
        '085',
        '086',
        '087',
        '088',
        '089',
        '090',
        '091',
        '092',
        '093',
        '094',
        '095',
        '096',
        '097',
        '098',
        '099',
        '100',
        '101',
        '102',
        '103',
        '104',
        '105',
        '106',
        '107',
        '108',
        '109',
        '110',
        '111',
        '112',
        '113',
        '114',
        '115',
        '116',
        '117',
        '118',
        '119',
        '120',
        '121',
        '122',
        '123',
        '124',
        '125',
        '126',
        '127',
        '128',
        '129',
        '130',
        '131',
        '132',
        '133',
        '134',
        '135',
        '136',
        '137',
        '138',
        '139',
        '140',
        '141',
        '142',
        '143',
        '144',
        '145',
        '146',
        '147',
        '148',
        '149',
        '150',
        '151',
        '152',
        '153',
        '154',
        '155',
        '156',
        '157',
        '158',
        '159',
        '160',
        '161',
        '162',
        '163',
        '164',
        '165',
        '166',
        '167',
        '168',
        '169',
        '170',
        '171',
        '172',
        '173',
        '174',
        '175',
        '176',
        '177',
        '178',
        '179',
        '180',
        '181',
        '182',
        '183',
        '184',
        '185',
        '186',
        '187',
        '188',
        '189',
        '190',
        '191',
        '192',
        '193',
        '194',
        '195',
        '196',
        '197',
        '198',
        '199',
        '200',
        '201',
        '202',
        '203',
        '204',
        '205',
        '206',
        '207',
        '208',
        '209',
        '210',
        '211',
        '212',
        '213',
        '214',
        '215',
        '216',
        '217',
        '218',
        '219',
        '220',
        '221',
        '222',
        '223',
        '224',
        '225',
        '226',
        '227',
        '228',
        '229',
        '230',
        '231',
        '232',
        '233',
        '234',
        '235',
        '236',
        '237',
        '238',
        '239',
        '240',
        '241',
        '242',
        '243',
        '244',
        '245',
        '246',
        '247',
        '248',
        '249',
        '250',
        '251',
        '252',
        '253',
        '254',
        '255',
        '256',
        '257',
        '258',
        '259',
        '260',
        '261',
        '262',
        '263',
        '264',
        '265',
        '266',
        '267',
        '268',
        '269',
        '270',
        '271',
        '272',
        '273',
        '274',
        '275',
        '276',
        '277',
        '278',
        '279',
        '280',
        '281',
        '282',
        '283',
        '284',
        '285',
        '286',
        '287',
        '288',
        '289',
        '290',
        '291',
        '292',
        '293',
        '294',
        '295',
        '296',
        '297',
        '298',
        '299',
        '300',
        '301',
        '302',
        '303',
        '304',
        '305',
        '306',
        '307',
        '308',
        '309',
        '310',
        '311',
        '312',
        '313',
        '314',
        '315',
        '316',
        '317',
        '318',
        '319',
        '320',
        '321',
        '322',
        '323',
        '324',
        '325',
        '326',
        '327',
        '328',
        '329',
        '330',
        '331',
        '332',
        '333',
        '334',
        '335',
        '336',
        '337',
        '338',
        '339',
        '340',
        '341',
        '342',
        '343',
        '344',
        '345',
        '346',
        '347',
        '348',
        '349',
        '350',
        '351',
        '352',
        '353',
        '354',
        '355',
        '356',
        '357',
        '358',
        '359',
        '360',
        '361',
        '362',
        '363',
        '364',
        '365',
        '366',
        '367',
        '368',
        '369',
        '370',
        '371',
        '372',
        '373',
        '374',
        '375',
        '376',
        '377',
        '378',
        '379',
        '380',
        '381',
        '382',
        '383',
        '384',
        '385',
        '386',
        '387',
        '388',
        '389',
        '390',
        '391',
        '392',
        '393',
        '394',
        '395',
        '396',
        '397',
        '398',
        '399',
        '400',
        '401',
        '402',
        '403',
        '404',
        '405',
        '406',
        '407',
        '408',
        '409',
        '410',
        '411',
        '412',
        '413',
        '414',
        '415',
        '416',
        '417',
        '418',
        '419',
        '420',
        '421',
        '422',
        '423',
        '424',
        '425',
        '426',
        '427',
        '428',
        '429',
        '430',
        '431',
        '432',
        '433',
        '434',
        '435',
        '436',
        '437',
        '438',
        '439',
        '440',
        '441',
        '442',
        '443',
        '444',
        '445',
        '446',
        '447',
        '448',
        '449',
        '450',
        '451',
        '452',
        '453',
        '454',
        '455',
        '456',
        '457',
        '458',
        '459',
        '460',
        '461',
        '462',
        '463',
        '464',
        '465',
        '466',
        '467',
        '468',
        '469',
        '470',
        '471',
        '472',
        '473',
        '474',
        '475',
        '476',
        '477',
        '478',
        '479',
        '480',
        '481',
        '482',
        '483',
        '484',
        '485',
        '486',
        '487',
        '488',
        '489',
        '490',
        '491',
        '492',
        '493',
        '494',
        '495',
        '496',
        '497',
        '498',
        '499',
        '500',
        '501',
        '502',
        '503',
        '504',
        '505',
        '506',
        '507',
        '508',
        '509',
        '510',
        '511',
        '512',
        '513',
        '514',
        '515',
        '516',
        '517',
        '518',
        '519',
        '520',
        '521',
        '522',
        '523',
        '524',
        '525',
        '526',
        '527',
        '528',
        '529',
        '530',
        '531',
        '532',
        '533',
        '534',
        '535',
        '536',
        '537',
        '538',
        '539',
        '540',
        '541',
        '542',
        '543',
        '544',
        '545',
        '546',
        '547',
        '548',
        '549',
        '550',
        '551',
        '552',
        '553',
        '554',
        '555',
        '556',
        '557',
        '558',
        '559',
        '560',
        '561',
        '562',
        '563',
        '564',
        '565',
        '566',
        '567',
        '568',
        '569',
        '570',
        '571',
        '572',
        '573',
        '574',
        '575',
        '576',
        '577',
        '578',
        '579',
        '580',
        '581',
        '582',
        '583',
        '584',
        '585',
        '586',
        '587',
        '588',
        '589',
        '590',
        '591',
        '592',
        '593',
        '594',
        '595',
        '596',
        '597',
        '598',
        '599',
        '600',
        '601',
        '602',
        '603',
        '604',
        '605',
        '606',
        '607',
        '608',
        '609',
        '610',
        '611',
        '612',
        '613',
        '614',
        '615',
        '616',
        '617',
        '618',
        '619',
        '620',
        '621',
        '622',
        '623',
        '624',
        '625',
        '626',
        '627',
        '628',
        '629',
        '630',
        '631',
        '632',
        '633',
        '634',
        '635',
        '636',
        '637',
        '638',
        '639',
        '640',
        '641',
        '642',
        '643',
        '644',
        '645',
        '646',
        '647',
        '649',
        '650',
        '651',
        '652',
        '653',
        '654',
        '655',
        '656',
        '657',
        '658',
        '659',
        '660',
        '661',
        '662',
        '663',
        '664',
        '665',
        '666',
        '667',
        '668',
        '669',
        '670',
        '671',
        '672',
        '673',
        '674',
        '675',
        '676',
        '677',
        '678',
        '679',
        '680',
        '681',
        '682',
        '683',
        '684',
        '685',
        '686',
        '687',
        '688',
        '689',
        '690',
        '691',
        '692',
        '693',
        '694',
        '695',
        '696',
        '697',
        '698',
        '699',
        '700',
        '701',
        '702',
        '703',
        '704',
        '705',
        '706',
        '707',
        '708',
        '709',
        '710',
        '711',
        '712',
        '713',
        '714',
        '715',
        '716',
        '717',
        '718',
        '719',
        '720',
        '721',
        '722',
        '723',
        '724',
        '725',
        '726',
        '727',
        '728',
        '729',
        '730',
        '731',
        '732',
        '733',
        '734',
        '735',
        '736',
        '737',
        '738',
        '739',
        '740',
        '741',
        '742',
        '743',
        '744',
        '745',
        '746',
        '747',
        '748',
        '749',
        '750',
        '751',
        '752',
        '753',
        '754',
        '755',
        '756',
        '757',
        '758',
        '759',
        '760',
        '761',
        '762',
        '763',
        '764',
        '765',
        '766',
        '767',
        '768',
        '769',
        '770',
        '771',
        '772',
        '773',
        '774',
        '775',
        '776',
        '777',
        '778',
        '779',
        '780',
        '781',
        '782',
        '783',
        '784',
        '785',
        '786',
        '787',
        '788',
        '789',
        '790',
        '791',
        '792',
        '793',
        '794',
        '795',
        '796',
        '797',
        '798',
        '799',
        '800',
        '801',
        '802',
        '803',
        '804',
        '805',
        '806',
        '807',
        '808',
        '809',
        '810',
        '811',
        '812',
        '813',
        '814',
        '815',
        '816',
        '817',
        '818',
        '819',
        '820',
        '821',
        '822',
        '823',
        '824',
        '825',
        '826',
        '827',
        '828',
        '829',
        '830',
        '831',
        '832',
        '833',
        '834',
        '835',
        '836',
        '837',
        '838',
        '839',
        '840',
        '841',
        '842',
        '843',
        '844',
        '845',
        '846',
        '847',
        '848',
        '849',
        '850',
        '851',
        '852',
        '853',
        '854',
        '855',
        '856',
        '857',
        '858',
        '859',
        '860',
        '861',
        '862',
        '863',
        '864',
        '865',
        '866',
        '867',
        '868',
        '869',
        '870',
        '871',
        '872',
        '873',
        '874',
        '875',
        '876',
        '877',
        '878',
        '879',
        '880',
        '881',
        '882',
        '883',
        '884',
        '885',
        '886',
        '887',
        '888',
        '889',
        '890',
        '891',
        '892',
        '893',
        '894',
        '895',
        '896',
        '897',
        '898',
        '899',
        '900',
        '901',
        '902',
        '903',
        '904',
        '905',
        '906',
        '907',
        '908',
        '909',
        '910',
        '911',
        '912',
        '913',
        '914',
        '915',
        '916',
        '917',
        '918',
        '919',
        '920',
        '921',
        '922',
        '923',
        '924',
        '925',
        '926',
        '927',
        '928',
        '929',
        '930',
        '931',
        '932',
        '933',
        '934',
        '935',
        '936',
        '937',
        '938',
        '939',
        '940',
        '941',
        '942',
        '943',
        '944',
        '945',
        '946',
        '947',
        '948',
        '949',
        '950',
        '951',
        '952',
        '953',
        '954',
        '955',
        '956',
        '957',
        '958',
        '959',
        '960',
        '961',
        '962',
        '963',
        '964',
        '965',
        '966',
        '967',
        '968',
        '969',
        '970',
        '971',
        '972',
        '973',
        '974',
        '975',
        '976',
        '977',
        '978',
        '979',
        '980',
        '981',
        '982',
        '983',
        '984',
        '985',
        '986',
        '987',
        '988',
        '989',
        '990',
        '991',
        '992',
        '993',
        '994',
        '995',
        '996',
        '997',
        '998',
        '999',
        '1000',
        '1001',
        '1002',
        '1003',
        '1004',
        '1005',
        '1006',
        '1007',
        '1008',
        '1009',
        '1010',
        '1011',
        '1012',
        '1013',
        '1014',
        '1015',
        '1016',
        '1017',
        '1018',
        '1019',
        '1020',
        '1021',
        '1022',
        '1023',
        '1024',
        '1025',
        '1026',
        '1027',
        '1028',
        '1029',
        '1030',
        '1031',
        '1032',
        '1033',
        '1034',
        '1035',
        '1036',
        '1037',
        '1038',
        '1039',
        '1040',
        '1041',
        '1042',
        '1043',
        '1044',
        '1045',
        '1046',
        '1047',
        '1048',
        '1049',
        '1050',
        '1051',
        '1052',
        '1053',
        '1054',
        '1055',
        '1056',
        '1057',
        '1058',
        '1059',
        '1060',
        '1061',
        '1062',
        '1063',
        '1064',
        '1065',
        '1066',
        '1067',
        '1068',
        '1069',
        '1070',
        '1071',
        '1072',
        '1073',
        '1074',
        '1075',
        '1076',
        '1077',
        '1078',
        '1079',
        '1080',
        '1081',
        '1082',
        '1083',
        '1084',
        '1085',
        '1086',
        '1087',
        '1088',
        '1089',
        '1090',
        '1091',
        '1092',
        '1093',
        '1094',
        '1095',
        '1096',
        '1097',
        '1098',
        '1099',
        '1100',
        '1101',
        '1102',
        '1103',
        '1104',
        '1105',
        '1106',
        '1107',
        '1108',
        '1109',
        '1110',
        '1111',
        '1112',
        '1113',
        '1114',
        '1115',
        '1116',
        '1117',
        '1118',
        '1119',
        '1120',
        '1121',
        '1122',
        '1123',
        '1124',
        '1125',
        '1126',
        '1127',
        '1128',
        '1129',
        '1130',
        '1131',
        '1132',
        '1133',
        '1134',
        '1135',
        '1136',
        '1137',
        '1138',
        '1139',
        '1140',
        '1141',
        '1142',
        '1143',
        '1144',
        '1145',
        '1146',
        '1147',
        '1148',
        '1149',
        '1150',
        '1151',
        '1152',
        '1153',
        '1154',
        '1155',
        '1156',
        '1157',
        '1158',
        '1159',
        '1160',
        '1161',
        '1162',
        '1163',
        '1164',
        '1165',
        '1166',
        '1167',
        '1168',
        '1169',
        '1170',
        '1171',
        '1172',
        '1173',
        '1174',
        '1175',
        '1176',
        '1177',
        '1178',
        '1179',
        '1180',
        '1181',
        '1182',
        '1183',
        '1184',
        '1185',
        '1186',
        '1187',
        '1188',
        '1189',
        '1190',
        '1191',
        '1192',
        '1193',
        '1194',
        '1195',
        '1196',
        '1197',
        '1198',
        '1199',
        '1200',
        '1201',
        '1202',
        '1203',
        '1204',
        '1205',
        '1206',
        '1207',
        '1208',
        '1209',
        '1210',
        '1211',
        '1212',
        '1213',
        '1214',
        '1215',
        '1216',
        '1217',
        '1218',
        '1219',
        '1220',
        '1221',
        '1222',
        '1223',
        '1224',
        '1225',
        '1226',
        '1227',
        '1228',
        '1229',
        '1230',
        '1231',
        '1232',
        '1233',
        '1234',
        '1235',
        '1236',
        '1237',
        '1238',
        '1239',
        '1240',
        '1241',
        '1242',
        '1243',
        '1244',
        '1245',
        '1246',
        '1247',
        '1248',
        '1249',
        '1250',
        '1251',
        '1252',
        '1253',
        '1254',
        '1255',
        '1256',
        '1257',
        '1258',
        '1259',
        '1260',
        '1261',
        '1262',
        '1263',
        '1276',
        '1277',
        '1278',
        '1279',
        '1280',
        '1281',
        '1282',
        '1283',
        '1284',
        '1285',
        '1286',
        '1287',
        '1288',
        '1289',
        '1290',
        '1291',
        '1292',
        '1293',
        '1294',
        '1295',
        '1296',
        '1297',
        '1298',
        '1299',
        '1300',
        '1301',
        '1302',
        '1303',
        '1304',
        '1305',
        '1306',
        '1307',
        '1308',
        '1309',
        '1310',
        '1311',
        '1312',
        '1313',
        '1314',
        '1315',
        '1316',
        '1317',
        '1318',
        '1319',
        '1320',
        '1321',
        '1322',
        '1323',
        '1324',
        '1325',
        '1326',
        '1327',
        '1328',
        '1329',
        '1330',
        '1331',
        '1332',
        '1333',
        '1334',
        '1335',
        '1336',
        '1337',
        '1338',
        '1339',
        '1340',
        '1341',
        '1342',
        '1343',
        '1344',
        '1345',
        '1346',
        '1347',
        '1348',
        '1349',
        '1350',
        '1351',
        '1352',
        '1353',
        '1354',
        '1355',
        '1356',
        '1357',
        '1358',
        '1359',
        '1360',
        '1361',
        '1362',
        '1363',
        '1364',
        '1365',
        '1366',
        '1367',
        '1368',
        '1369',
        '1370',
        '1371',
        '1372',
        '1373',
        '1374',
        '1375',
        '1376',
        '1377',
        '1378',
        '1379',
        '1380',
        '1381',
        '1382',
        '1383',
        '1384',
        '1385',
        '1386',
        '1387',
        '1388',
        '1389',
        '1390',
        '1391',
        '1392',
        '1393',
        '1394',
        '1395',
        '1396',
        '1397',
        '1398',
        '1399',
        '1400',
        '1401',
        '1402',
        '1403',
        '1404',
        '1405',
        '1406',
        '1407',
        '1408',
        '1409',
        '1410',
        '1411',
        '1412',
        '1413',
        '1414',
        '1415',
        '1416',
        '1417',
        '1418',
        '1419',
        '1420',
        '1421',
        '1422',
        '1423',
        '1424',
        '1425',
        '1426',
        '1427',
        '1428',
        '1429',
        '1430',
        '1431',
        '1432',
        '1433',
        '1434',
        '1435',
        '1436',
        '1437',
        '1438',
        '1439',
        '1440',
        '1441',
        '1442',
        '1443',
        '1444',
        '1445',
        '1446',
        '1447',
        '1448',
        '1449',
        '1450',
        '1451',
        '1452',
        '1453',
        '1454',
        '1455',
        '1456',
        '1457',
        '1458',
        '1459',
        '1460',
        '1461',
        '1462',
        '1463',
        '1464',
        '1465',
        '1466',
        '1467',
        '1468',
        '1469',
        '1470',
        '1471',
        '1472',
        '1473',
        '1474',
        '1475',
        '1476',
        '1477',
        '1478',
        '1479',
        '1480',
        '1481',
        '1482',
        '1483',
        '1484',
        '1485',
        '1486',
        '1487',
        '1488',
        '1489',
        '1490',
        '1491',
        '1492',
        '1493',
        '1494',
        '1495',
        '1496',
        '1497',
        '1498',
        '1499',
        '1500',
        '1501',
        '1502',
        '1503',
        '1504',
        '1505',
        '1506',
        '1507',
        '1508',
        '1509',
        '1510',
        '1511',
        '1512',
        '1513',
        '1514',
        '1515',
        '1516',
        '1517',
        '1518',
        '1519',
        '1520',
        '1521',
        '1522',
        '1523',
        '1524',
        '1525',
        '1526',
        '1527',
        '1528',
        '1529',
        '1530',
        '1531',
        '1532',
        '1533',
        '1534',
        '1535',
        '1536',
        '1537',
        '1538',
        '1539',
        '1540',
        '1541',
        '1542',
        '1543',
        '1544',
        '1545',
        '1546',
        '1547',
        '1548',
        '1549',
        '1550',
        '1551',
        '1552',
        '1553',
        '1554',
        '1555',
        '1556',
        '1557',
        '1558',
        '1559',
        '1560',
        '1561',
        '1562',
        '1563',
        '1564',
        '1565',
        '1566',
        '1567',
        '1568',
        '1569',
        '1570',
        '1571',
        '1572',
        '1573',
        '1574',
        '1575',
        '1576',
        '1577',
        '1578',
        '1579',
        '1580',
        '1581',
        '1582',
        '1583',
        '1584',
        '1585',
        '1586',
        '1587',
        '1588',
        '1589',
        '1590',
        '1591',
        '1592',
        '1593',
        '1594',
        '1595',
        '1596',
        '1597',
        '1598',
        '1599',
        '1600',
        '1601',
        '1602',
        '1603',
        '1604',
        '1605',
        '1606',
        '1607',
        '1608',
        '1609',
        '1610',
        '1611',
        '1612',
        '1613',
        '1614',
        '1615',
        '1616',
        '1617',
        '1618',
        '1619',
        '1620',
        '1621',
        '1622',
        '1623',
        '1624',
        '1625',
        '1626',
        '1627',
        '1628',
        '1629',
        '1630',
        '1631',
        '1632',
        '1633',
        '1634',
        '1635',
        '1636',
        '1637',
        '1638',
        '1639',
        '1640',
        '1641',
        '1642',
        '1643',
        '1644',
        '1645',
        '1646',
        '1647',
        '1648',
        '1649',
        '1650',
        '1651',
        '1652',
        '1653',
        '1654',
        '1655',
        '1656',
        '1657',
        '1658',
        '1659',
        '1660',
        '1661',
        '1662',
        '1663',
        '1664',
        '1665',
        '1666',
        '1667',
        '1668',
        '1669',
        '1670',
        '1671',
        '1672',
        '1673',
        '1674',
        '1675',
        '1676',
        '1677',
        '1678',
        '1679',
        '1680',
        '1681',
        '1682',
        '1683',
        '1684',
        '1685',
        '1686',
        '1687',
        '1688',
        '1689',
        '1690',
        '1691',
        '1692',
        '1693',
        '1694',
        '1695',
        '1696',
        '1697',
        '1698',
        '1699',
        '1700',
        '1701',
        '1702',
        '1703',
        '1704',
        '1705',
        '1706',
        '1707',
        '1708',
        '1709',
        '1710',
        '1711',
        '1712',
        '1713',
        '1714',
        '1715',
        '1716',
        '1717',
        '1718',
        '1719',
        '1720',
        '1721',
        '1722',
        '1723',
        '1724',
        '1725',
        '1726',
        '1727',
        '1728',
        '1729',
        '1730',
        '1731',
        '1732',
        '1733',
        '1734',
        '1735',
        '1736',
        '1737',
        '1738',
        '1739',
        '1740',
        '1741',
        '1742',
        '1743',
        '1744',
        '1745',
        '1746',
        '1747',
        '1748',
        '1749',
        '1750',
        '1751',
        '1752',
        '1753',
        '1754',
        '1755',
        '1756',
        '1757',
        '1758',
        '1759',
        '1760',
        '1761',
        '1762',
        '1763',
        '1764',
        '1765',
        '1766',
        '1767',
        '1768',
        '1769',
        '1770',
        '1771',
        '1772',
        '1773',
        '1774',
        '1775',
        '1776',
        '1777',
        '1778',
        '1779',
        '1780',
        '1781',
        '1782',
        '1783',
        '1784',
        '1785',
        '1786',
        '1787',
        '1788',
        '1789',
        '1790',
        '1791',
        '1792',
        '1793',
        '1794',
        '1795',
        '1796',
        '1797',
        '1798',
        '1799',
        '1800',
        '1801',
        '1802',
        '1803',
        '1804',
        '1805',
        '1806',
        '1807',
        '1808',
        '1809',
        '1810',
        '1811',
        '1812',
        '1813',
        '1814',
        '1815',
        '1816',
        '1817',
        '1818',
        '1819',
        '1820',
        '1821',
        '1822',
        '1823',
        '1824',
        '1825',
        '1826',
        '1827',
        '1828',
        '1829',
        '1830',
        '1831',
        '1832',
        '1833',
        '1834',
        '1835',
        '1836',
        '1837',
        '1838',
        '1839',
        '1840',
        '1841',
        '1842',
        '1843',
        '1844',
        '1845',
        '1846',
        '1847',
        '1848',
        '1849',
        '1850',
        '1851',
        '1852',
        '1853',
        '1854',
        '1855',
        '1856',
        '1857',
        '1858',
        '1859',
        '1860',
        '1861',
        '1862',
        '1863',
        '1864',
        '1865',
        '1866',
        '1867',
        '1868',
        '1869',
        '1870',
        '1871',
        '1872',
        '1873',
        '1874',
        '1875',
        '1876',
        '1877',
        '1878',
        '1879',
        '1880',
        '1881',
        '1882',
        '1883',
        '1884',
        '1885',
        '1886',
        '1887',
        '1888',
        '1889',
        '1890',
        '1891',
        '1892',
        '1893',
        '1894',
        '1895',
        '1896',
        '1897',
        '1898',
        '1899',
        '1900',
        '1901',
        '1902',
        '1903',
        '1904',
        '1905',
        '1906',
        '1907',
        '1908',
        '1909',
        '1910',
        '1911',
        '1912',
        '1913',
        '1914',
        '1915',
        '1916',
        '1917',
        '1918',
        '1919',
        '1920',
        '1921',
        '1922',
        '1923',
        '1924',
        '1925',
        '1926',
        '1927',
        '1928',
        '1929',
        '1930',
        '1931',
        '1932',
        '1933',
        '1934',
        '1935',
        '1936',
        '1937',
        '1938',
        '1939',
        '1940',
        '1941',
        '1942',
        '1943',
        '1944',
        '1945',
        '1946',
        '1947',
        '1948',
        '1949',
        '1950',
        '1951',
        '1952',
        '1953',
        '1954',
        '1955',
        '1956',
        '1957',
        '1958',
        '1959',
        '1960',
        '1961',
        '1962',
        '1963',
        '1964',
        '1965',
        '1966',
        '1967',
        '1968',
        '1969',
        '1970',
        '1971',
        '1972',
        '1973',
        '1974',
        '1975',
        '1976',
        '1977',
        '1978',
        '1979',
        '1980',
        '1981',
        '1982',
        '1983',
        '1984',
        '1985',
        '1986',
        '1987',
        '1988',
        '1989',
        '1990',
        '1991',
        '1992',
        '1993',
        '1994',
        '1995',
        '1996',
        '1997',
        '1998',
        '1999',
        '2000',
        '2001',
        '2002',
        '2003',
        '2004',
        '2005',
        '2006',
        '2007',
        '2008',
        '2009',
        '2010',
        '2011',
        '2012',
        '2013',
        '2014',
        '2015',
        '2016',
        '2017',
        '2018',
        '2019',
        '2020',
        '2021',
        '2022',
        '2023',
        '2024',
        '2025',
        '2026',
        '2027',
        '2028',
        '2029',
        '2030',
        '2031',
        '2032',
        '2033',
        '2034',
        '2035',
        '2036',
        '2037',
        '2038',
        '2039',
        '2040',
        '2041',
        '2042',
        '2043',
        '2044',
        '2045',
        '2046',
        '2047',
        '2048',
        '2049',
        '2050',
        '2051',
        '2052',
        '2053',
        '2054',
        '2055',
        '2056',
        '2057',
        '2058',
        '2059',
        '2060',
        '2061',
        '2062',
        '2063',
        '2064',
        '2065',
        '2066',
        '2067',
        '2068',
        '2069',
        '2070',
        '2071',
        '2072',
        '2073',
        '2074',
        '2075',
        '2076',
        '2077',
        '2078',
        '2079',
        '2080',
        '2081',
        '2082',
        '2083',
        '2084',
        '2085',
        '2086',
        '2087',
        '2088',
        '2089',
        '2090',
        '2091',
        '2092',
        '2093',
        '2094',
        '2095',
        '2096',
        '2097',
        '2098',
        '2099',
        '2100',
        '2101',
        '2102',
        '2103',
        '2104',
        '2105',
        '2106',
        '2107',
        '2108',
        '2109',
        '2110',
        '2111',
        '2112',
        '2113',
        '2114',
        '2115',
        '2116',
        '2117',
        '2118',
        '2119',
        '2120',
        '2121',
        '2122',
        '2123',
        '2124',
        '2125',
        '2126',
        '2127',
        '2128',
        '2129',
        '2130',
        '2131',
        '2132',
        '2133',
        '2134',
        '2135',
        '2136',
        '2137',
        '2138',
        '2139',
        '2140',
        '2141',
        '2142',
        '2143',
        '2144',
        '2145',
        '2146',
        '2147',
        '2148',
        '2149',
        '2150',
        '2151',
        '2152',
        '2153',
        '2154',
        '2155',
        '2156',
        '2157',
        '2158',
        '2159',
        '2160',
        '2161',
        '2162',
        '2163',
        '2164',
        '2165',
        '2166',
        '2167',
        '2168',
        '2169',
        '2170',
        '2171',
        '2172',
        '2173',
        '2174',
        '2175',
        '2176',
        '2177',
        '2178',
        '2179',
        '2180',
        '2181',
        '2182',
        '2183',
        '2184',
        '2185',
        '2186',
        '2187',
        '2188',
        '2189',
        '2190',
        '2191',
        '2192',
        '2193',
        '2194',
        '2195',
        '2196',
        '2197',
        '2198',
        '2199',
        '2200',
        '2201',
        '2202',
        '2203',
        '2204',
        '2205',
        '2206',
        '2207',
        '2208',
        '2209',
        '2210',
        '2211',
        '2212',
        '2213',
        '2214',
        '2215',
        '2216',
        '2217',
        '2218',
        '2219',
        '2220',
        '2221',
        '2222',
        '2223',
        '2224',
        '2225',
        '2226',
        '2227',
        '2228',
        '2229',
        '2230',
        '2231',
        '2232',
        '2233',
        '2234',
        '2235',
        '2236',
        '2237',
        '2238',
        '2239',
        '2240',
        '2241',
        '2242',
        '2243',
        '2244',
        '2245',
        '2246',
        '2247',
        '2248',
        '2249',
        '2250',
        '2251',
        '2252',
        '2253',
        '2254',
        '2255',
        '2256',
        '2257',
        '2258',
        '2259',
        '2260',
        '2261',
        '2262',
        '2263',
        '2264',
        '2265',
        '2266',
        '2267',
        '2268',
        '2269',
        '2270',
        '2271',
        '2272',
        '2273',
        '2274',
        '2275',
        '2276',
        '2277',
        '2278',
        '2279',
        '2280',
        '2281',
        '2282',
        '2283',
        '2284',
        '2285',
        '2286',
        '2287',
        '2288',
        '2289',
        '2290',
        '2291',
        '2292',
        '2293',
        '2294',
        '2295',
        '2296',
        '2297',
        '2298',
        '2299',
        '2300',
        '2301',
        '2302',
        '2303',
        '2304',
        '2305',
        '2306',
        '2307',
        '2308',
        '2309',
        '2310',
        '2311',
        '2312',
        '2313',
        '2314',
        '2315',
        '2316',
        '2317',
        '2318',
        '2319',
        '2320',
        '2321',
        '2322',
        '2323',
        '2324',
        '2325',
        '2326',
        '2327',
        '2328',
        '2329',
        '2330',
        '2331',
        '2332',
        '2333',
        '2334',
        '2335',
        '2336',
        '2337',
        '2338',
        '2339',
        '2340',
        '2341',
        '2342',
        '2343',
        '2344',
        '2345',
        '2346',
        '2347',
        '2348',
        '2349',
        '2350',
        '2351',
        '2352',
        '2353',
        '2354',
        '2355',
        '2356',
        '2357',
        '2358',
        '2359',
        '2360',
        '2361',
        '2362',
        '2363',
        '2364',
        '2365',
        '2366',
        '2367',
        '2368',
        '2369',
        '2370',
        '2371',
        '2372',
        '2373',
        '2374',
        '2375',
        '2376',
        '2377',
        '2378',
        '2379',
        '2380',
        '2381',
        '2382',
        '2383',
        '2384',
        '2385',
        '2386',
        '2387',
        '2388',
        '2389',
        '2390',
        '2391',
        '2392',
        '2393',
        '2394',
        '2395',
        '2396',
        '2397',
        '2398',
        '2399',
        '2400',
        '2401',
        '2402',
        '2403',
        '2404',
        '2405',
        '2406',
        '2407',
        '2408',
        '2409',
        '2410',
        '2411',
        '2412',
        '2413',
        '2414',
        '2415',
        '2416',
        '2417',
        '2418',
        '2419',
        '2420',
        '2421',
        '2422',
        '2423',
        '2424',
        '2425',
        '2426',
        '2427',
        '2428',
        '2429',
        '2430',
        '2431',
        '2432',
        '2433',
        '2434',
        '2435',
        '2436',
        '2437',
        '2438',
        '2439',
        '2440',
        '2441',
        '2442',
        '2443',
        '2444',
        '2445',
        '2446',
        '2447',
        '2448',
        '2449',
        '2450',
        '2451',
        '2452',
        '2453',
        '2454',
        '2455',
        '2456',
        '2457',
        '2458',
        '2459',
        '2460',
        '2461',
        '2462',
        '2463',
        '2464',
        '2465',
        '2466',
        '2467',
        '2468',
        '2469',
        '2470',
        '2471',
        '2472',
        '2473',
        '2474',
        '2475',
        '2476',
        '2477',
        '2478',
        '2479',
        '2480',
        '2481',
        '2482',
        '2483',
        '2484',
        '2485',
        '2486',
        '2487',
        '2488',
        '2489',
        '2490',
        '2491',
        '2492',
        '2493',
        '2494',
        '2495',
        '2496',
        '2497',
        '2498',
        '2499',
        '2500',
        '2501',
        '2502',
        '2503',
        '2504',
        '2505',
        '2506',
        '2507',
        '2508',
        '2509',
        '2510',
        '2511',
        '2512',
        '2513',
        '2514',
        '2515',
        '2516',
        '2517',
        '2518',
        '2519',
        '2520',
        '2521',
        '2522',
        '2523',
        '2524',
        '2525',
        '2526',
        '2527',
        '2528',
        '2529',
        '2530',
        '2531',
        '2532',
        '2533',
        '2534',
        '2535',
        '2536',
        '2537',
        '2538',
        '2539',
        '2540',
        '2541',
        '2542',
        '2543',
        '2544',
        '2545',
        '2546',
        '2547',
        '2548',
        '2549',
        '2550',
        '2551',
        '2552',
        '2553',
        '2554',
        '2555',
        '2556',
        '2557',
        '2558',
        '2559',
        '2560',
        '2561',
        '2562',
        '2563',
        '2564',
        '2565',
        '2566',
        '2567',
        '2568',
        '2569',
        '2570',
        '2571',
        '2572',
        '2573',
        '2574',
        '2575',
        '2576',
        '2577',
        '2578',
        '2579',
        '2580',
        '2581',
        '2582',
        '2583',
        '2584',
        '2585',
        '2586',
        '2587',
        '2588',
        '2589',
        '2590',
        '2591',
        '2592',
        '2593',
        '2594',
        '2595',
        '2596',
        '2597',
        '2598',
        '2599',
        '2600',
        '2601',
        '2602',
        '2603',
        '2604',
        '2605',
        '2606',
        '2607',
        '2608',
        '2609',
        '2610',
        '2611',
        '2612',
        '2613',
        '2614',
        '2615',
        '2616',
        '2617',
        '2618',
        '2619',
        '2620',
        '2621',
        '2622',
        '2623',
        '2624',
        '2625',
        '2626',
        '2627',
        '2628',
        '2629',
        '2630',
        '2631',
        '2632',
        '2633',
        '2634',
        '2635',
        '2636',
        '2637',
        '2638',
        '2639',
        '2640',
        '2641',
        '2642',
        '2643',
        '2644',
        '2645',
        '2646',
        '2647',
        '2648',
        '2649',
        '2650',
        '2651',
        '2652',
        '2653',
        '2654',
        '2655',
        '2656',
        '2657',
        '2658',
        '2659',
        '2660',
        '2661',
        '2662',
        '2663',
        '2664',
        '2665',
        '2666',
        '2667',
        '2668',
        '2669',
        '2670',
        '2671',
        '2672',
        '2673',
        '2674',
        '2675',
        '2676',
        '2677',
        '2678',
        '2679',
        '2680',
        '2681',
        '2682',
        '2683',
        '2684',
        '2685',
        '2686',
        '2687',
        '2688',
        '2689',
        '2690',
        '2691',
        '2692',
        '2693',
        '2694',
        '2695',
        '2696',
        '2697',
        '2698',
        '2699',
        '2700',
        '2701',
        '2702',
        '2703',
        '2704',
        '2705',
        '2706',
        '2707',
        '2708',
        '2709',
        '2710',
        '2711',
        '2712',
        '2713',
        '2714',
        '2715',
        '2716',
        '2717',
        '2718',
        '2719',
        '2720',
        '2721',
        '2722',
        '2723',
        '2724',
        '2725',
        '2726',
        '2727',
        '2728',
        '2729',
        '2730',
        '2731',
        '2732',
        '2733',
        '2734',
        '2735',
        '2736',
        '2737',
        '2738',
        '2739',
        '2740',
        '2741',
        '2742',
        '2743',
        '2744',
        '2745',
        '2746',
        '2747',
        '2748',
        '2749',
        '2750',
        '2751',
        '2752',
        '2753',
        '2754',
        '2755',
        '2756',
        '2757',
        '2758',
        '2759',
        '2760',
        '2761',
        '2762',
        '2763',
        '2764',
        '2765',
        '2766',
        '2767',
        '2768',
        '2769',
        '2770',
        '2771',
        '2772',
        '2773',
        '2774',
        '2775',
        '2776',
        '2777',
        '2778',
        '2779',
        '2780',
        '2781',
        '2782',
        '2783',
        '2784',
        '2785',
        '2786',
        '2787',
        '2788',
        '2789',
        '2790',
        '2791',
        '2792',
        '2793',
        '2794',
        '2795',
        '2796',
        '2797',
        '2798',
        '2799',
        '2800',
        '2801',
        '2802',
        '2803',
        '2804',
        '2805',
        '2806',
        '2807',
        '2808',
        '2809',
        '2810',
        '2811',
        '2812',
        '2813',
        '2814',
        '2815',
        '2816',
        '2817',
        '2818',
        '2819',
        '2820',
        '2821',
        '2822',
        '2823',
        '2824',
        '2825',
        '2826',
        '2827',
        '2828',
        '2829',
        '2830',
        '2831',
        '2832',
        '2833',
        '2834',
        '2835',
        '2836',
        '2837',
        '2838',
        '2839',
        '2840',
        '2841',
        '2842',
        '2843',
        '2844',
        '2845',
        '2846',
        '2847',
        '2848',
        '2849',
        '2850',
        '2851',
        '2852',
        '2853',
        '2854',
        '2855',
        '2856',
        '2857',
        '2858',
        '2859',
        '2860',
        '2861',
        '2862',
        '2863',
        '2864',
        '2865',
        '2866',
        '2867',
        '2868',
        '2869',
        '2870',
        '2871',
        '2872',
        '2873',
        '2874',
        '2875',
        '2876',
        '2877',
        '2878',
        '2879',
        '2880',
        '2881',
        '2882',
        '2883',
        '2884',
        '2885',
        '2886',
        '2887',
        '2888',
        '2889',
        '2890',
        '2891',
        '2892',
        '2893',
        '2894',
        'A0',
        'A1',
        'A2',
        'A3',
        'A4',
        'A5',
        'A6',
        'A7',
        'A8',
        'A9',
        'AA',
        'AB',
        'AK',
        'AL',
        'AM',
        'B0',
        'B1',
        'B2',
        'B4',
        'B5',
        'B6',
        'B7',
        'B8',
        'B9',
        'BA',
        'BB',
        'BK',
        'BL',
        'BM',
        'BTileX',
        'C0',
        'C1',
        'C2',
        'C3',
        'C4',
        'C5',
        'C6',
        'C7',
        'C8',
        'CA',
        'CB',
        'CK',
        'CL',
        'CM',
        'D0',
        'D1',
        'D2',
        'D3',
        'D4',
        'D5',
        'D6',
        'D7',
        'D8',
        'D9',
        'DA',
        'DB',
        'DK',
        'DL',
        'DM',
        'DT',
        'E0',
        'E1',
        'E2',
        'E3',
        'E4',
        'E5',
        'E6',
        'E7',
        'E8',
        'E9',
        'EA',
        'EB',
        'EK',
        'EL',
        'F0',
        'F1',
        'F2',
        'F3',
        'F4',
        'F5',
        'F6',
        'F7',
        'F8',
        'F9',
        'FA',
        'FB',
        'FK',
        'FL',
        'G0',
        'G1',
        'G2',
        'G3',
        'G4',
        'G5',
        'G6',
        'G7',
        'G8',
        'G9',
        'GA',
        'GB',
        'GK',
        'GL',
        'H0',
        'H1',
        'H2',
        'H3',
        'H4',
        'H5',
        'H6',
        'H7',
        'H8',
        'H9',
        'HA',
        'HB',
        'HK',
        'I0',
        'I1',
        'I2',
        'I3',
        'I4',
        'I5',
        'I6',
        'I7',
        'I8',
        'I9',
        'IA',
        'IB',
        'IK',
        'J0',
        'J1',
        'J2',
        'J3',
        'J4',
        'J5',
        'J6',
        'J7',
        'J8',
        'J9',
        'JA',
        'JB',
        'JK',
        'K0',
        'K1',
        'K2',
        'K3',
        'K4',
        'K5',
        'K6',
        'K7',
        'K8',
        'K9',
        'KA',
        'KB',
        'KK',
        'KL',
        'L0',
        'L1',
        'L2',
        'L3',
        'L4',
        'L5',
        'L6',
        'L7',
        'L8',
        'L9',
        'LA',
        'LB',
        'LK',
        'LL',
        'M0',
        'M1',
        'M2',
        'M3',
        'M4',
        'M5',
        'M6',
        'M7',
        'M8',
        'M9',
        'MA',
        'MB',
        'MK',
        'ML',
        'N0',
        'N1',
        'N2',
        'N3',
        'N4',
        'N5',
        'N6',
        'N7',
        'N8',
        'N9',
        'NA',
        'NB',
        'NK',
        'NL',
        'O0',
        'O1',
        'O2',
        'O3',
        'O4',
        'O5',
        'O6',
        'O7',
        'O8',
        'O9',
        'OA',
        'OB',
        'OK',
        'OL',
        'P0',
        'P1',
        'P2',
        'P3',
        'P4',
        'P5',
        'P6',
        'P7',
        'P8',
        'P9',
        'PA',
        'PB',
        'PK',
        'PL',
        'Q0',
        'Q1',
        'Q2',
        'Q3',
        'Q4',
        'Q5',
        'Q6',
        'Q7',
        'Q8',
        'Q9',
        'QA',
        'QB',
        'QK',
        'QL',
        'R0',
        'R1',
        'R2',
        'R3',
        'R4',
        'R5',
        'R6',
        'R7',
        'R8',
        'R9',
        'RB',
        'RK',
        'RL',
        'S0',
        'S1',
        'S2',
        'S3',
        'S4',
        'S5',
        'S6',
        'S7',
        'S8',
        'S9',
        'SA',
        'SB',
        'SK',
        'SL',
        'T0',
        'T1',
        'T2',
        'T3',
        'T4',
        'T5',
        'T6',
        'T7',
        'T8',
        'T9',
        'TA',
        'TB',
        'TK',
        'TL',
        'U0',
        'U1',
        'U2',
        'U3',
        'U4',
        'U5',
        'U6',
        'U7',
        'U8',
        'U9',
        'UA',
        'UB',
        'UK',
        'UL',
        'V0',
        'V1',
        'V2',
        'V3',
        'V4',
        'V5',
        'V6',
        'V7',
        'V8',
        'V9',
        'VA',
        'VB',
        'VK',
        'VL',
        'W0',
        'W1',
        'W2',
        'W3',
        'W4',
        'W5',
        'W6',
        'W7',
        'W8',
        'W9',
        'WA',
        'WB',
        'WK',
        'WL',
        'X0',
        'X1',
        'X2',
        'X3',
        'X4',
        'X5',
        'X6',
        'X7',
        'X8',
        'X9',
        'XA',
        'XB',
        'XK',
        'XL',
        'YK',
        'YL',
        'ZK',
        'ZL'
    ];
    private twoNonTransparentTilesArray: string[] = [
        '_01',
        '-D',
        '-E',
        '-F',
        '-G',
        '-H',
        '-I',
        '-J',
        '-K',
        '-L',
        '-M',
        '-N',
        '-O',
        '-P',
        '-Q',
        '-R',
        '-S',
        '-T',
        '-U',
        '-V',
        '-W',
        '-X',
        '-Y',
        '(D',
        '(E',
        '(F',
        '(G',
        '(H',
        '(I',
        '(J',
        ')F',
        ')T',
        ')X',
        ')Y',
        '0B',
        '0C',
        '0D',
        '0E',
        '0F',
        '0G',
        '0H',
        '0I',
        '0J',
        '0K',
        '0L',
        '0M',
        '0N',
        '0P',
        '0Q',
        '0R',
        '0S',
        '0T',
        '0U',
        '1A',
        '1H',
        '1I',
        '1J',
        '1O',
        '1Q',
        '1R',
        '1S',
        '1T',
        '1U',
        '1V',
        '1W',
        '1X',
        '2A',
        '2B',
        '2C',
        '2D',
        '2E',
        '2F',
        '2G',
        '2H',
        '2I',
        '2J',
        '2K',
        '2L',
        '2M',
        '2N',
        '2O',
        '2P',
        '2Q',
        '2R',
        '2S',
        '2T',
        '2U',
        '2V',
        '2W',
        '2X',
        '5B',
        '6A',
        '6B',
        '6C',
        '6D',
        '6E',
        '6F',
        '6G',
        '6H',
        '6I',
        '6J',
        '6K',
        '6L',
        '6M',
        '6P',
        '6Q',
        '6R',
        '6S',
        '6T',
        '6U',
        '6V',
        '6W',
        '7A',
        '7B',
        '7C',
        '7D',
        '7E',
        '7F',
        '7G',
        '7H',
        '7I',
        '7J',
        '7K',
        '7L',
        '7M',
        '7N',
        '7O',
        '7P',
        '7Q',
        '7R',
        '7S',
        '7T',
        '7U',
        '7V',
        '7W',
        '7X',
        '7Y',
        '7Z',
        '8F',
        '8G',
        '8H',
        '8P',
        '8Q',
        '8R',
        '8U',
        '8V',
        '9C',
        '9D',
        '9E',
        '9F',
        '028',
        '032',
        '033',
        '034',
        '035',
        '036',
        '037',
        '052',
        '071',
        '072',
        '073',
        '074',
        '081',
        '082',
        '083',
        '084',
        '095',
        '096',
        '097',
        '098',
        '099',
        '100',
        '101',
        '102',
        '103',
        '104',
        '105',
        '106',
        '145',
        '146',
        '147',
        '148',
        '151',
        '158',
        '161',
        '168',
        '192',
        '193',
        '194',
        '195',
        '196',
        '197',
        '198',
        '199',
        '208',
        '241',
        '242',
        '243',
        '244',
        '278',
        '280',
        '298',
        '317',
        '341',
        '366',
        '379',
        '391',
        '414',
        '504',
        '525',
        '543',
        '554',
        '610',
        '614',
        '626',
        '633',
        '662',
        '663',
        '664',
        '665',
        '667',
        '668',
        '674',
        '696',
        '698',
        '721',
        '735',
        '743',
        '744',
        '745',
        '746',
        '747',
        '748',
        '749',
        '750',
        '751',
        '752',
        '754',
        '758',
        '759',
        '770',
        '773',
        '776',
        '779',
        '782',
        '785',
        '788',
        '804',
        '805',
        '806',
        '807',
        '808',
        '809',
        '810',
        '811',
        '820',
        '821',
        '822',
        '823',
        '824',
        '825',
        '838',
        '839',
        '840',
        '841',
        '842',
        '843',
        '910',
        '916',
        '919',
        '920',
        '921',
        '922',
        '942',
        '943',
        '944',
        '945',
        '946',
        '947',
        '948',
        '949',
        '950',
        '951',
        '952',
        '953',
        '954',
        '955',
        '956',
        '957',
        '959',
        '964',
        '969',
        '970',
        '975',
        '978',
        '981',
        '986',
        '991',
        '992',
        '993',
        '998',
        '1001',
        '1004',
        '1009',
        '1014',
        '1015',
        '1016',
        '1021',
        '1024',
        '1027',
        '1030',
        '1033',
        '1038',
        '1039',
        '1044',
        '1047',
        '1249',
        '1250',
        '1252',
        '1253',
        '1259',
        '1260',
        '1261',
        '1262',
        '1263',
        '1326',
        '1327',
        '1328',
        '1329',
        '1330',
        '1331',
        '1333',
        '1334',
        '1335',
        '1336',
        '1340',
        '1341',
        '1342',
        '1346',
        '1349',
        '1351',
        '1355',
        '1358',
        '1364',
        '1365',
        '1366',
        '1367',
        '1512',
        '1513',
        '1514',
        '1515',
        '1516',
        '1517',
        '1534',
        '1535',
        '1543',
        '1544',
        '1547',
        '1554',
        '1555',
        '1556',
        '1557',
        '1558',
        '1560',
        '1562',
        '1563',
        '1564',
        '1566',
        '1568',
        '1570',
        '1572',
        '1573',
        '1620',
        '1625',
        '1634',
        '1635',
        '1639',
        '1640',
        '1641',
        '1668',
        '1669',
        '1670',
        '1671',
        '1673',
        '1676',
        '1677',
        '1678',
        '1679',
        '1680',
        '1682',
        '1692',
        '1695',
        '1749',
        '1750',
        '1751',
        '1752',
        '1753',
        '1769',
        '1770',
        '1771',
        '1772',
        '1773',
        '1774',
        '1781',
        '1812',
        '1851',
        '1857',
        '1858',
        '1859',
        '1867',
        '1868',
        '1869',
        '1870',
        '1871',
        '1874',
        '1875',
        '1876',
        '1884',
        '1885',
        '1886',
        '1887',
        '1888',
        '1891',
        '1892',
        '1893',
        '1901',
        '1902',
        '1903',
        '1904',
        '1905',
        '1909',
        '1923',
        '1925',
        '1926',
        '1936',
        '1943',
        '2048',
        '2062',
        '2064',
        '2072',
        '2073',
        '2074',
        '2098',
        '2099',
        '2100',
        '2101',
        '2102',
        '2108',
        '2109',
        '2110',
        '2126',
        '2127',
        '2128',
        '2129',
        '2130',
        '2131',
        '2132',
        '2133',
        '2134',
        '2147',
        '2176',
        '2188',
        '2190',
        '2191',
        '2192',
        '2205',
        '2222',
        '2224',
        '2237',
        '2238',
        '2239',
        '2260',
        '2261',
        '2262',
        '2291',
        '2294',
        '2339',
        '2344',
        '2347',
        '2348',
        '2349',
        '2350',
        '2351',
        '2352',
        '2353',
        '2354',
        '2356',
        '2361',
        '2362',
        '2363',
        '2364',
        '2365',
        '2366',
        '2367',
        '2368',
        '2369',
        '2370',
        '2371',
        '2453',
        '2536',
        '2537',
        '2539',
        '2540',
        '2541',
        '2542',
        '2544',
        '2548',
        '2549',
        '2552',
        '2554',
        '2560',
        '2561',
        '2562',
        '2563',
        '2565',
        '2567',
        '2568',
        '2569',
        '2570',
        '2572',
        '2575',
        '2576',
        '2577',
        '2578',
        '2579',
        '2580',
        '2699',
        '2720',
        '2773',
        '2812',
        '2813',
        '2814',
        '2815',
        '2816',
        '2817',
        '2818',
        '2819',
        '2820',
        '2821',
        '2822',
        '2823',
        '2824',
        '2825',
        '2826',
        '2827',
        '2828',
        '2829',
        '2830',
        '2831',
        '2832',
        '2833',
        '2834',
        '2836',
        '2837',
        '2838',
        '2849',
        '2879',
        'A0',
        'A1',
        'A2',
        'A5',
        'A6',
        'AB',
        'AM',
        'B0',
        'B1',
        'B2',
        'B4',
        'B5',
        'B7',
        'B9',
        'BB',
        'BL',
        'BM',
        'BTileX',
        'C0',
        'C1',
        'C2',
        'C5',
        'C6',
        'C8',
        'CB',
        'CL',
        'CM',
        'D0',
        'D1',
        'D2',
        'D5',
        'D6',
        'D8',
        'D9',
        'DB',
        'DL',
        'DM',
        'DT',
        'E0',
        'E1',
        'E2',
        'E4',
        'E5',
        'E6',
        'E7',
        'E9',
        'EB',
        'EL',
        'F0',
        'F1',
        'F2',
        'F4',
        'F5',
        'F7',
        'F9',
        'FB',
        'FL',
        'G1',
        'G2',
        'G4',
        'G5',
        'G6',
        'G7',
        'G9',
        'GB',
        'H0',
        'H1',
        'H2',
        'H4',
        'H5',
        'H6',
        'H7',
        'H9',
        'HB',
        'I0',
        'I1',
        'I2',
        'I5',
        'I6',
        'I9',
        'IB',
        'J0',
        'J1',
        'J2',
        'J4',
        'J5',
        'J6',
        'JB',
        'K0',
        'K1',
        'K2',
        'K4',
        'K5',
        'K6',
        'KB',
        'KK',
        'L0',
        'L1',
        'L2',
        'L5',
        'L6',
        'L9',
        'LB',
        'M0',
        'M1',
        'M2',
        'M5',
        'M6',
        'N0',
        'N1',
        'N2',
        'N5',
        'N6',
        'NL',
        'O0',
        'O1',
        'O2',
        'O4',
        'O5',
        'O7',
        'O9',
        'OL',
        'P0',
        'P1',
        'P2',
        'P4',
        'P5',
        'P6',
        'P7',
        'P8',
        'P9',
        'PL',
        'Q0',
        'Q1',
        'Q2',
        'Q5',
        'Q6',
        'QL',
        'R0',
        'R1',
        'R2',
        'R3',
        'R5',
        'R6',
        'RL',
        'S0',
        'S1',
        'S2',
        'S5',
        'S6',
        'S9',
        'SA',
        'SL',
        'T0',
        'T1',
        'T2',
        'T4',
        'T5',
        'T7',
        'T9',
        'TA',
        'TL',
        'U0',
        'U1',
        'U2',
        'U5',
        'U6',
        'UA',
        'UL',
        'V0',
        'V1',
        'V2',
        'V6',
        'V7',
        'VA',
        'VB',
        'VL',
        'W0',
        'W1',
        'W2',
        'W5',
        'W6',
        'WA',
        'WB',
        'WL',
        'X0',
        'X1',
        'X2',
        'X5',
        'X6',
        'XA',
        'XB'
    ];

    public hasTransparency(tileId: number): boolean {
        // console.log(
        //     'hasTransparency',
        //     tileId,
        //     this.twoTilesArray[tileId - 1],
        //     !this.twoNonTransparentTilesArray.includes(this.twoTilesArray[tileId - 1])
        // );
        return !this.twoNonTransparentTilesArray.includes(this.twoTilesArray[tileId - 1]);
    }

    /**
     * We create the skeleton file for the ExportedMap.
     * @param data The raw data from the Tiled map JSON file.
     */

    public constructor(private data: MapData) {
        let { width, height, tilewidth: tileSize } = this.data,
            divisionSize = getMapDivisionSize();

        if (width % divisionSize !== 0 || height % divisionSize !== 0)
            log.warning(
                'The map size specified cannot be evenly divided, server may not be able to load the map.'
            );

        this.map = {
            width,
            height,
            tileSize,
            version: Date.now(),

            data: [],

            collisions: [],
            entities: {},

            tilesets: {},
            animations: {},

            plateau: {},

            high: [],
            objects: [],
            areas: {},
            cursors: {},
            trees: []
        };

        this.parseTilesets();
        this.parseLayers();
    }

    /**
     * We iterate through all the tilesets in the map
     * and parse each one of them individually.
     */

    private parseTilesets(): void {
        let { tilesets } = this.data;

        if (!_.isArray(tilesets)) {
            log.error('Could not parse tilesets, corrupted format.');
            return;
        }

        _.each(tilesets, (tileset: Tileset) => {
            /**
             * All the tilesets follow the format of `tilesheet_NUMBER`.
             * We extrac the number in this process, which allows us to properly
             * organize them. Alongside that, we also store the first tileId
             * of each tileset (firstGID) as the key's value.
             */

            let [, tilesetId] = tileset.name.split('-');

            if (tilesetId) this.map.tilesets![parseInt(tilesetId) - 1] = tileset.firstgid - 1;

            this.parseTileset(tileset);
        });

        // Convert local tree dictionary into an array for the server.
        _.each(this.#trees, (tree: ProcessedResource) => {
            // Ensure stumps and cut stumps match lengths. Otherwise skip the tree.
            if (tree.base.length !== tree.depleted.length)
                return log.error(`${tree.type} has a stump and cut stump length mismatch.`);

            this.map.trees.push(tree);
        });
    }

    /**
     * Parses through each layer in the Tiled map.
     */

    private parseLayers(): void {
        _.each(this.data.layers, (layer: Layer) => {
            if (!layer.name.startsWith('two_'))
                switch (layer.type) {
                    case 'tilelayer':
                        this.parseTileLayer(layer);
                        break;

                    case 'objectgroup':
                        this.parseObjectLayer(layer);
                        break;
                }
        });
    }

    /**
     * We parse the tileset and extract collisions
     * and other individual tile properties.
     * @param tileset A tileset from the tilemap.
     */

    private parseTileset(tileset: Tileset): void {
        let { tiles, firstgid } = tileset;

        _.each(tiles, (tile: Tile) => {
            let tileId = this.getTileId(tileset, tile);

            if (tile.animation) this.parseAnimation(tileId, firstgid, tile.animation);

            _.each(tile.properties, (property: Property) => {
                if (this.isEntityTileset(tileset)) this.tilesetEntities[tileId] = property.value;
                else this.parseProperties(tileId, property);
            });
        });
    }

    /**
     * Handles the animated tile properties.
     * @param tileId Tile ID of the animation tile.
     * @param firstgid The first tile ID that the animation tile bases off of.
     * @param animations Array containing Tiled animation information.
     */

    private parseAnimation(tileId: number, firstgid: number, animations: Animation[]): void {
        // Temporary storage for animation data.
        let data: ProcessedAnimation[] = [];

        _.each(animations, (animation: Animation) => {
            data.push({
                duration: animation.duration,
                tileId: this.getId(firstgid, animation.tileid, -1)
            });
        });

        this.map.animations![tileId] = data;
    }

    /**
     * Used for extracting information about the tile. Elements such as whether
     * or not it's colliding, an object, or if it has a special cursor
     * property when we hover over it.
     * @param tileId The tileId of the property.
     * @param property The property information of the tile.
     */

    private parseProperties(tileId: number, property: Property): void {
        let { name } = property,
            value = (parseInt(property.value, 10) as never) || property.value,
            { high, objects, cursors } = this.map;

        if (this.isCollisionProperty(name)) this.#collisionTiles[tileId] = true;

        switch (name) {
            case 'v':
                high.push(tileId);
                break;

            case 'o':
                objects.push(tileId);
                break;

            case 'cursor':
                cursors[tileId] = value;
                break;

            case 'tree':
            case 'stump':
            case 'cutstump':
                return this.parseTreeProperty(name, tileId, value);
        }
    }

    /**
     * We decompress the layer data then handle it depending on its properties.
     * Special layers such as `blocking`, `entities`, and `plateau` are parsed
     * independently. The remaining layers are parsed and we layer them in a singular
     * data array.
     * @param layer The layer object all the data.
     */

    private parseTileLayer(layer: Layer): void {
        let name = layer.name.toLowerCase(),
            { layers } = this.data,
            twoLayer = layers.find((layer: Layer) => layer.name === `two_${name}`);

        layer.data = this.getLayerData(layer.data, layer.compression)!;
        layer.data = this.combineWithTwoLayer(layer, twoLayer);

        if (name === 'blocking') return this.parseBlocking(layer);
        if (name === 'entities') return this.parseEntities(layer);
        if (name.startsWith('plateau')) return this.parsePlateau(layer);

        this.parseTileLayerData(layer.data, name);

        this.format();
    }

    /**
     * We iterate through each tile layer, and for each tile at the
     * same position on the tilemap, we add (if exists) or set the tileId
     * in our overall data file. The format ends up looking like this:
     * [3, 4, 0, [12, 14], [21, 42, 12]] Where the array represents
     * tiles layered on top of eachother.
     *
     * Subsequently, any tile indexes that are colliding are added to the collision
     * array.
     * @param mapData The raw data for each tile layer.
     */

    private parseTileLayerData(mapData: number[], name: string): void {
        let { data, collisions } = this.map;

        _.each(mapData, (initialValue: number, index: number) => {
            if (initialValue < 1 || initialValue === 3224) return;
            let value = initialValue,
                isOpaque = !this.hasTransparency(initialValue);

            // Add the roof flags.
            if (name.endsWith('roof')) value += 20_000;

            // Add the shadow flags.
            if (name.endsWith('shadow')) {
                isOpaque = false;
                value += 40_000;
            }

            if (!data[index] || isOpaque) data[index] = value;
            else if (_.isArray(data[index])) (data[index] as number[]).push(value);
            else data[index] = [data[index] as number, value];

            // Remove flip flags for the sake of calculating collisions.
            if (this.isFlipped(value)) value = this.removeFlipFlags(value);

            // Add collision indexes to the map.
            if (value in this.#collisionTiles) collisions.push(index);
        });
    }

    /**
     * A blocking tile is a special type of collision that is
     * added independently of tileIds. It is instead a collision
     * that is part of the map tile index. In other words, we can
     * add a collision to a tile in the map despite that tile
     * not having a collision property.
     * @param layer The tile layer containing the blocking data.
     */

    private parseBlocking(layer: Layer): void {
        _.each(layer.data, (value: number, index: number) => {
            if (value < 3478) return;
            this.map.collisions.push(index);
        });
    }

    /**
     * Static entities are spawned using the entities tileset. Each tile contains
     * a property about what entity to spawn. Whne we detect a tileId corresponding
     * to our tiles from the entities tileset, we associate that tileIndex (position)
     * with an entity that should spawn there.
     * @param layer The `entities` layer containing the entity tiles.
     */

    private parseEntities(layer: Layer): void {
        let { entities } = this.map;

        _.each(layer.data, (value: number, index: number) => {
            if (value < 1) return;

            if (value in this.tilesetEntities) entities[index] = this.tilesetEntities[value];
        });
    }

    /**
     * We parse through the plateau (imaginary z-index parts of the map)
     * and store the tileIndex alongside the `plateau level` in our
     * `plateau` array within the map object.
     * @param layer The tile layer containing the tile data.
     */

    private parsePlateau(layer: Layer): void {
        let level = parseInt(layer.name.split('plateau')[1]),
            { collisions, plateau } = this.map;

        _.each(layer.data, (value: number, index: number) => {
            if (value < 1) return;

            // We skip collisions
            if (collisions.includes(value)) return;

            plateau[index] = level;
        });
    }

    /**
     * We parse through pre-defined object layers and add them
     * to the map data.
     * @param layer An object layer from Tiled map.
     */

    private parseObjectLayer(layer: Layer) {
        let { name, objects } = layer,
            { areas } = this.map;

        if (!objects) return;

        if (!(name in areas)) areas[name] = [];

        _.each(objects, (info) => {
            this.parseObject(name, info);
        });
    }

    /**
     * Takes data from Tiled properties and stores it into the areas of the map.
     * @param areaName The name of the area we are storing objects in.
     * @param object The raw layer object data from Tiled.
     */

    private parseObject(areaName: string, object: LayerObject) {
        let { id, x, y, name, width, height, properties } = object;

        this.map.areas[areaName].push({
            id,
            name,
            x: Math.round(x / this.map.tileSize),
            y: Math.round(y / this.map.tileSize),
            width: width / this.map.tileSize,
            height: height / this.map.tileSize,
            polygon: this.extractPolygon(object)
        });

        _.each(properties, (property) => {
            let index = this.map.areas[areaName].length - 1, // grab the last object (one we just added)
                { name, value } = property;

            this.map.areas[areaName][index][name as never] = value;
        });
    }

    /**
     * Takes tree property data and stores it into the map trees property.
     * If a tree already exists within said property, it appends data to it.
     * Tree data is split into `data,` `stump,` and `cutStump.` After we
     * store the tree data, we convert it into an array for the server to parse.
     * @param name The name of the property.
     * @param tileId The tileId currently processing.
     * @param value Property value of the tree.
     */

    private parseTreeProperty(name: string, tileId: number, value: never): void {
        if (!(value in this.#trees))
            this.#trees[value] = {
                data: [],
                base: [],
                depleted: [],
                type: value
            };

        // Organize tree data into their respective arrays.
        switch (name) {
            case 'tree':
                this.#trees[value].data.push(tileId);
                break;

            case 'stump':
                this.#trees[value].base.push(tileId);
                break;

            case 'cutstump':
            case 'stumpcut':
                this.#trees[value].depleted.push(tileId);
                break;
        }
    }

    /**
     * Polygons are drawn without the offset, we add the `x` and `y` position
     * of the object to get the true position of the polygon.
     *
     * @param info The raw data from Tiled
     * @returns A modified array of polygons adjusted for `tileSize`.
     */

    private extractPolygon(info: LayerObject) {
        if (!info.polygon) return;

        let polygon: Position[] = [],
            { tileSize } = this.map;

        _.each(info.polygon, (point) => {
            polygon.push({
                x: (info.x + point.x) / tileSize,
                y: (info.y + point.y) / tileSize
            });
        });

        return polygon;
    }

    /**
     * We are generating a map data array without defining preliminary
     * variables. In other words, we are accessing indexes of the array
     * ahead of time, so JavaScript engine just fills in values in the array
     * for us. In this case, it fills in with `null`.
     *
     * An example is accessing index 4 of an empty array and setting value
     * 5 at that index. Because of this, index 0, 1, 2, 3 are going to be
     * set to null. We need to get rid of these values before sending data
     * to the server.
     */

    private format(): void {
        _.each(this.map.data, (value, index) => {
            if (!value) this.map.data[index] = 0;
        });
    }

    /**
     * Tiles that undergo transformations have their tileId altered.
     * We must temporarily remove that in order to calculate collision
     * indexes.
     * @param tileId The tileId with transformation flags applied.
     * @returns The original tileId without transformation flags.
     */

    private removeFlipFlags(tileId: number): number {
        return (
            tileId &
            ~(
                Modules.MapFlags.DIAGONAL_FLAG |
                Modules.MapFlags.VERTICAL_FLAG |
                Modules.MapFlags.HORIZONTAL_FLAG
            )
        );
    }

    /**
     * This function allows us to decompress data from the Tiled editor
     * map file. Thus far, our parser only supports zlib, gzip, and CSV
     * in the JSON file-format. Further support is not entirely necessary
     * but should be considered.
     *
     * @param data The we will be parsing, base64 string format
     * for compressed data, and string for uncompressed data.
     * @param type The type of compression 'zlib', 'gzip', '' are accepted inputs.
     * @returns Return a number array containing the data of the layer.
     */

    private getLayerData(data: number[], type: string): number[] {
        if (_.isArray(data)) return data;

        let dataBuffer = Buffer.from(data, 'base64'),
            inflatedData: Buffer;

        switch (type) {
            case 'zlib':
                inflatedData = zlib.inflateSync(dataBuffer);
                break;

            case 'gzip':
                inflatedData = zlib.gunzipSync(dataBuffer);
                break;

            default:
                log.error('Invalid compression format detected.');
                return [];
        }

        if (!inflatedData) return [];

        let size = this.map.width * this.map.height * 4,
            layerData: number[] = [];

        if (inflatedData.length !== size) {
            log.error('Invalid buffer detected while parsing layer.');
            return [];
        }

        for (let i = 0; i < size; i += 4) layerData.push(inflatedData.readUInt32LE(i));

        return layerData;
    }

    /**
     * Checks the tileset for whether or not it is responsible for entity info.
     * @param tileset The tileset we are checking
     * @returns Whether or not the tileset is for entities.
     */

    private isEntityTileset(tileset: Tileset): boolean {
        return tileset.name.toLowerCase() === 'entities';
    }

    /**
     * A function to check if a property is colliding. We have
     * a separate function as we will add more properties that
     * are colliding.
     * @param propertyName The property name we are iterating.
     * @returns Whether or not the property is a collision or an object.
     */

    private isCollisionProperty(propertyName: string): boolean {
        return propertyName === 'c' || propertyName === 'o';
    }

    /**
     * Checks if the tileId specified has undergone any translations.
     * @param tileId The tileId we are checking.
     * @returns Whether the tileId is greater than the lowest bitwise flag.
     */

    private isFlipped(tileId: number): boolean {
        return tileId > Modules.MapFlags.DIAGONAL_FLAG;
    }

    /**
     * A barebones function for adding firstgid, id, and offset together
     * when trying to determine the overall tileId of a tile.
     * @param firstgid The first tileId in the tileset.
     * @param id The tileId of the current tile.
     * @param offset Offset if we want.
     * @returns The tileId globally amongst tilesets.
     */

    private getId(firstgid: number, id: number, offset = 0): number {
        return firstgid + id + offset;
    }

    /**
     * We are using a unified function in case we need to make adjustments
     * to how we process tiling indexes. An example is not having to go through
     * all the instances of tileId calculations to modify one variable. This
     * is just an overall more organized way of doing work.
     *
     * @param tileset A tileset layer that we are parsing.
     * @param tile The current tile that we are parsing through.
     * @param offset The offset of the tileIndex.
     */

    private getTileId(tileset: Tileset, tile: Tile, offset = 0): number {
        return this.getId(tileset.firstgid, tile.id, offset);
    }

    /**
     * Takes the exported map and converts it into a string.
     * @returns A stringified version of the map.
     */

    public getMap(): string {
        let {
            version,
            width,
            height,
            tileSize,
            data,
            collisions,
            areas,
            plateau,
            high,
            objects,
            cursors,
            entities,
            trees
        } = this.map;

        return JSON.stringify({
            version,
            width,
            height,
            tileSize,
            data,
            collisions,
            areas,
            plateau,
            high,
            objects,
            cursors,
            entities,
            trees
        });
    }

    /**
     * Client map consists of a stripped down version of the game map.
     * We are only sending essential information to the client.
     */

    public getClientMap(): string {
        let { width, height, tileSize, version, high, tilesets, animations } = this.map;

        return JSON.stringify({
            width,
            height,
            tileSize,
            version,
            high,
            tilesets,
            animations
        });
    }

    public getTilesets(): { [tilesetId: number]: number } {
        return this.map.tilesets!;
    }

    private combineWithTwoLayer(layer: Layer, twoLayer: Layer | undefined): number[] {
        if (!twoLayer) return layer.data;

        let twoLayerData = this.getLayerData(twoLayer.data, twoLayer.compression)!,
            newLayerData: number[] = [];
        for (let [i, twoLayerDatum] of twoLayerData.entries())
            newLayerData[i] = layer.data[i] > 0 ? layer.data[i] : twoLayerDatum;

        return newLayerData;
    }
}
